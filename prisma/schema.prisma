generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id            Int                  @id @default(autoincrement())
  token              String?
  email              String?
  username           String?
  password           String?
  phone_number       String?
  profile_url        String?
  firstname          String?
  lastname           String?
  gender             String?
  birthdate          DateTime?
  verify_status      Boolean?
  subscription       Subscription?
  location_latitude  String?
  location_longitude String?
  createdAt          DateTime?            @default(now())
  updatedAt          DateTime?            @updatedAt
  pets               Pet[]
  notifications      Notification[]
  matchesAsUser1     Match[]              @relation("UserMatches")
  // matchesAsUser2     Match[]              @relation("User2Matches")
  user_saved         User_Saved[]
  user_dislike       User_Dislike[]
  user_haveMet       User_HaveMet[]
  user_interest      User_Interest[]
  events_enrolled    Event_UserEnrolled[]
  events_owned       Event[]              @relation("OwnerEvents")
}

model Pet {
  pet_id   Int     @id @default(autoincrement())
  user_id  Int
  petname  String?
  gender   Gender?
  age      Int?
  size     Size?
  rating   Float?
  breed_id Int?
  user     User    @relation(fields: [user_id], references: [user_id])
}

model Event {
  event_id    Int                  @id @default(autoincrement())
  owner_id    Int
  eventTitle  String?
  description String?
  eventDate   DateTime?
  status      Boolean?
  createdAt   DateTime?            @default(now())
  updatedAt   DateTime?            @updatedAt
  owner       User                 @relation("OwnerEvents", fields: [owner_id], references: [user_id])
  enrollments Event_UserEnrolled[]
}

model Notification {
  notification_id Int       @id @default(autoincrement())
  user_id         Int
  title           String?
  message         String?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  user            User      @relation(fields: [user_id], references: [user_id])
}

model Match {
  match_id   Int             @id @default(autoincrement())
  user_id1   Int
  user_id2   Int
  createdAt  DateTime?       @default(now())
  updatedAt  DateTime?       @updatedAt
  userCreate User            @relation("UserMatches", fields: [user_id1], references: [user_id])
  // user2     User            @relation("User2Matches", fields: [user_id2], references: [user_id])
  messages   Match_Message[]
}

model Match_Message {
  message_id  Int          @id @default(autoincrement())
  match_id    Int
  sender_id   Int
  receiver_id Int
  types       MessageType?
  message     String?
  createdAt   DateTime?    @default(now())
  match       Match        @relation(fields: [match_id], references: [match_id])
}

model User_Saved {
  user_id       Int
  saved_user_id Int
  user          User @relation(fields: [user_id], references: [user_id])

  @@id([user_id, saved_user_id])
}

model User_Dislike {
  user_id         Int
  dislike_user_id Int
  user            User @relation(fields: [user_id], references: [user_id])

  @@id([user_id, dislike_user_id])
}

model User_HaveMet {
  user_id     Int
  met_user_id Int
  user        User @relation(fields: [user_id], references: [user_id])

  @@id([user_id, met_user_id])
}

model User_Interest {
  user_id   Int
  target_id Int
  user      User @relation(fields: [user_id], references: [user_id])

  @@id([user_id, target_id])
}

model Event_UserEnrolled {
  enroll_id Int   @id @default(autoincrement())
  event_id  Int
  user_id   Int
  event     Event @relation(fields: [event_id], references: [event_id])
  user      User  @relation(fields: [user_id], references: [user_id])
}

model Pet_Breed {
  breed_id         Int                   @id @default(autoincrement())
  breedName        String
  group            String
  heightInches     String // Store as a range (e.g., "9-11.5")
  weightPounds     String // Store as a range (e.g., "7-10")
  personality      String // Store as a comma-separated list or string
  goodWithDogs     Int
  playfulnessLevel Int
  watchdog         Int
  adaptability     Int
  energyLevel      Int
  personalities    PersonalityRelation[] // Relation to personality traits

  @@map("Pet_Breed")
}

// model PetBreedRelation {
//   pet_id   Int
//   breed_id Int

//   pet   Pet       @relation(fields: [pet_id], references: [pet_id], onDelete: Cascade)
//   breed Pet_Breed @relation(fields: [breed_id], references: [breed_id], onDelete: Cascade)

//   @@id([pet_id, breed_id])
//   @@map("Pet_Breed_Relation")
// }

model Personality {
  personality_id   Int                   @id @default(autoincrement())
  trait            String // e.g., "friendly", "confident"
  breedPersonality PersonalityRelation[]
}

model PersonalityRelation {
  breed_id       Int
  personality_id Int

  breed       Pet_Breed   @relation(fields: [breed_id], references: [breed_id], onDelete: Cascade)
  personality Personality @relation(fields: [personality_id], references: [personality_id], onDelete: Cascade)

  @@id([breed_id, personality_id])
  @@map("Personality_Relation")
}

enum Gender {
  MALE
  FEMALE
}

enum Size {
  SMALL
  MEDIUM
  LARGE
}

enum Subscription {
  FREE
  PREMIUM
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
}
