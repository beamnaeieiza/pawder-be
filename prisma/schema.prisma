generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id             Int                  @id @default(autoincrement())
  token               String?
  email               String?
  username            String?
  password            String?
  phone_number        String?
  profile_url         String?
  firstname           String?
  lastname            String?
  id_card             String?
  verify_status       Boolean?
  twoFA               Boolean?             @default(false)
  deactivate          Boolean?             @default(false)
  subscription        Subscription?
  location_latitude   String?
  location_longitude  String?
  createdAt           DateTime?            @default(now())
  updatedAt           DateTime?            @updatedAt
  gender              String?
  birthdate           DateTime?
  distance_interest   String?              @default("10")
  expo_token          String?
  events_owned        Event[]              @relation("OwnerEvents")
  events_enrolled     Event_UserEnrolled[]
  matchesAsUser1      Match[]              @relation("UserMatches")
  matchesAsUser2      Match[]              @relation("UserMatches2")
  chatAsUser1         Chat[]               @relation("UserChat")
  chatAsUser2         Chat[]               @relation("UserChat2")
  group_chats         Group_Chat[]
  notifications       Notification[]
  pets                Pet[]
  user_dislike        User_Dislike[]
  user_haveMet        User_HaveMet[]
  interests           User_Interest[]      @relation(name: "TargetUser")
  user_interest       User_Interest[]      @relation(name: "OwnerUser")
  user_saved          User_Saved[]
  user_blocked        User_Blocked[]
  user_unmatch        User_Unmatch[]
  rating              Rating[]
  sent_group_messages Group_Chat_Message[] @relation("UserSentGroupMessages")
}

model Pet {
  pet_id          Int         @id @default(autoincrement())
  user_id         Int
  breed_id        Int?
  pet_url         String?
  pet_url2        String?
  pet_url3        String?
  petname         String?
  pet_description String?
  gender          Gender?
  age             Float?
  size            Size?
  weight          Float?
  height          Float?
  rating          Float?
  mixed_breed     String?
  user            User        @relation(fields: [user_id], references: [user_id])
  breed           Pet_Breed?  @relation(fields: [breed_id], references: [breed_id])
  habits          Pet_Habit[] @relation("PetHabits")
  pet_interests   Pet_Interest[]
  
  // interests       User_Interest[]
  // Pet_Breed_Relation Pet_Breed_Relation[]

  @@index([user_id], map: "Pet_user_id_fkey")
}

model Pet_Habit {
  habit_id   Int    @id
  habit_name String
  pets       Pet[]  @relation("PetHabits")
}

model Rating {
  rating_id    Int     @id @default(autoincrement())
  user_id      Int
  from_user_id Int
  rating       Float?
  comment      String?
  rating_user  User    @relation(fields: [from_user_id], references: [user_id])
  // user               User                @relation(fields: [user_id], references: [user_id])

  @@index([user_id], map: "Rating_user_id_fkey")
}

model Event {
  event_id    Int                  @id @default(autoincrement())
  owner_id    Int
  eventTitle  String?
  description String?
  event_url   String?
  eventDate   DateTime?
  eventTime   String?
  location    String?
  status      Boolean?
  createdAt   DateTime?            @default(now())
  updatedAt   DateTime?            @updatedAt
  owner       User                 @relation("OwnerEvents", fields: [owner_id], references: [user_id])
  enrollments Event_UserEnrolled[]

  @@index([owner_id], map: "Event_owner_id_fkey")
}

model Notification {
  notification_id Int       @id @default(autoincrement())
  user_id         Int
  title           String?
  message         String?
  read_status     Boolean?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  user            User      @relation(fields: [user_id], references: [user_id])

  @@index([user_id], map: "Notification_user_id_fkey")
}

model Match {
  match_id  Int       @id @default(autoincrement())
  user_id1  Int
  user_id2  Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  user1     User      @relation("UserMatches", fields: [user_id1], references: [user_id])
  user2     User      @relation("UserMatches2", fields: [user_id2], references: [user_id])

  @@index([user_id1], map: "Match_user_id1_fkey")
}

model Chat {
  chat_id   Int            @id @default(autoincrement())
  user_id1  Int
  user_id2  Int
  createdAt DateTime?      @default(now())
  updatedAt DateTime?      @updatedAt
  user1     User           @relation("UserChat", fields: [user_id1], references: [user_id])
  user2     User           @relation("UserChat2", fields: [user_id2], references: [user_id])
  messages  Chat_Message[]

  // @@index([user_id1], map: "Chat_user_id1_fkey")
}

model Chat_Message {
  message_id  Int          @id @default(autoincrement())
  chat_id     Int
  sender_id   Int
  receiver_id Int
  types       MessageType?
  message     String?
  read_status Boolean?     @default(false)
  createdAt   DateTime?    @default(now())
  match       Chat         @relation(fields: [chat_id], references: [chat_id])

  @@index([chat_id], map: "Chat_Message_chat_id_fkey")
}

model Group_Chat {
  group_chat_id Int                  @id @default(autoincrement())
  group_name    String?
  group_url     String?
  createdAt     DateTime?            @default(now())
  updatedAt     DateTime?            @updatedAt
  group_members User[]
  messages      Group_Chat_Message[]
}

model Group_Chat_Message {
  group_message_id Int          @id @default(autoincrement())
  group_chat_id    Int
  sender_id        Int
  message          String?
  types            MessageType?
  createdAt        DateTime?    @default(now())
  updatedAt        DateTime?    @updatedAt
  sender           User         @relation("UserSentGroupMessages", fields: [sender_id], references: [user_id])
  group_chat       Group_Chat   @relation(fields: [group_chat_id], references: [group_chat_id])

  @@index([group_chat_id], map: "Group_Chat_Message_group_chat_id_fkey")
}

model User_Blocked {
  user_id         Int
  blocked_user_id Int
  user            User @relation(fields: [blocked_user_id], references: [user_id])

  @@id([user_id, blocked_user_id])
}

model User_Saved {
  user_id       Int
  saved_user_id Int
  user          User @relation(fields: [saved_user_id], references: [user_id])

  @@id([user_id, saved_user_id])
}

model User_Dislike {
  user_id         Int
  dislike_user_id Int
  user            User @relation(fields: [dislike_user_id], references: [user_id])

  @@id([user_id, dislike_user_id])
}

model User_HaveMet {
  user_id     Int
  met_user_id Int
  user        User @relation(fields: [met_user_id], references: [user_id])

  @@id([user_id, met_user_id])
}

model User_Interest {
  // interest_id    Int   @id @default(autoincrement())
  user_id        Int
  target_user_id Int
  user           User           @relation(name: "TargetUser", fields: [target_user_id], references: [user_id])
  owner          User           @relation(name: "OwnerUser", fields: [user_id], references: [user_id])
  pet_interests  Pet_Interest[]

  @@id([user_id, target_user_id])
}

model Pet_Interest {
  id             Int           @id @default(autoincrement())
  user_interest  User_Interest @relation(fields: [user_id, target_user_id], references: [user_id, target_user_id])
  user_id        Int
  target_user_id Int
  pet_id         Int
  pet            Pet           @relation(fields: [pet_id], references: [pet_id])
}

// model User_Pet_Interest {
//   pet_interest_id Int          @id @default(autoincrement())
//   interest_id     Int
//   pet_id          Int
//   user_id         Int
//   pet             Pet          @relation(fields: [pet_id], references: [pet_id])
//   user_interest   User_Interest @relation(fields: [interest_id], references: [interest_id])

//   @@index([interest_id], map: "User_Pet_Interest_interest_id_fkey")
//   @@index([pet_id], map: "User_Pet_Interest_pet_id_fkey")
// }

model User_Unmatch {
  user_id         Int
  unmatch_user_id Int
  user            User @relation(fields: [unmatch_user_id], references: [user_id])

  @@id([user_id, unmatch_user_id])
}

model Event_UserEnrolled {
  enroll_id Int   @id @default(autoincrement())
  event_id  Int
  user_id   Int
  event     Event @relation(fields: [event_id], references: [event_id])
  user      User  @relation(fields: [user_id], references: [user_id])

  @@index([event_id], map: "Event_UserEnrolled_event_id_fkey")
  @@index([user_id], map: "Event_UserEnrolled_user_id_fkey")
}

model Pet_Breed {
  breed_id         Int    @id @default(autoincrement())
  breedName        String
  group            String
  heightInches     String
  weightPounds     String
  personality      String
  goodWithDogs     Int
  playfulnessLevel Int
  watchdog         Int
  adaptability     Int
  energyLevel      Int
  pets             Pet[]
  // Pet_Breed_Relation Pet_Breed_Relation[]

  @@map("Pet_Breed")
}

// model Personality {
//   personality_id   Int                   @id @default(autoincrement())
//   trait            String
//   breedPersonality PersonalityRelation[]
// }

// model PersonalityRelation {
//   breed_id       Int
//   personality_id Int
//   breed          Pet_Breed   @relation(fields: [breed_id], references: [breed_id], onDelete: Cascade)
//   personality    Personality @relation(fields: [personality_id], references: [personality_id], onDelete: Cascade)

//   @@id([breed_id, personality_id])
//   @@index([personality_id], map: "Personality_Relation_personality_id_fkey")
//   @@map("Personality_Relation")
// }

// model Pet_Breed_Relation {
//   pet_id    Int
//   breed_id  Int
//   Pet_Breed Pet_Breed @relation(fields: [breed_id], references: [breed_id], onDelete: Cascade)
//   Pet       Pet       @relation(fields: [pet_id], references: [pet_id], onDelete: Cascade)

//   @@id([pet_id, breed_id])
//   @@index([breed_id], map: "Pet_Breed_Relation_breed_id_fkey")
// }

enum Gender {
  MALE
  FEMALE
}

enum Size {
  SMALL
  MEDIUM
  LARGE
}

enum Subscription {
  FREE
  PREMIUM
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
}
